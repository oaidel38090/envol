services:

################################################################
# Configuration du Notebook Jupyter pour les TP en Python      #
################################################################

  jupyterlab:
      image: jupyter/minimal-notebook
      container_name: 'jupyterlab'
      environment:
        JUPYTER_ENABLE_LAB: "yes"
      command: >
        sh -c "pip install jupyterlab_myst &&
              pip install pymongo &&
              start-notebook.sh --NotebookApp.password='' --NotebookApp.token=''"
      volumes:
        - ..:/home/jovyan
      ports:
        - "8888:8888"
      networks:
        - bigdata

#######################################
# Configuration S3    #
#######################################

  s3:
    container_name: "s3"
    image: localstack/localstack
    ports:
      - "4566:4566"            # LocalStack Gateway
      - "4510-4559:4510-4559"  # external services port range
    environment:
      # LocalStack configuration: https://docs.localstack.cloud/references/configuration/
      - DEBUG=${DEBUG:-0}
    volumes:
      - "s3data:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - bigdata



#######################################
# Configuration du cluster MongoDB    #
#######################################

  mongo1:
    container_name: mongo1
    hostname: mongo1
    image: mongo:4.4.6
    ports:
      - 30001:27017
    command: mongod --replSet my-mongo-set
    volumes:
      - mongo1-data:/data/db
    networks:
      - bigdata

  mongo2:
    container_name: mongo2
    hostname: mongo2
    image: mongo:4.4.6
    ports:
      - 30002:27017
    command: mongod --replSet my-mongo-set
    volumes:
      - mongo2-data:/data/db
    networks:
      - bigdata

  mongo3:
    container_name: mongo3
    hostname: mongo3
    image: mongo:4.4.6
    ports:
      - 30003:27017
    command: mongod --replSet my-mongo-set
    volumes:
      - mongo3-data:/data/db
    networks:
      - bigdata

# finally, we can define the initialization server
# this runs the `rs.initiate` command to intialize
# the replica set and connect the three servers to each other
  mongoinit:
    image: mongo:4.4.6
    # this container will exit after executing the command
    restart: "no"
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    networks:
      - bigdata
    command: >
      mongo --host mongo1:27017 --eval
      '
      config = {
      "_id" : "my-mongo-set",
      "members" : [
        {
          "_id" : 0,
          "host" : "mongo1:27017"
        },
        {
          "_id" : 1,
          "host" : "mongo2:27017"
        },
        {
          "_id" : 2,
          "host" : "mongo3:27017"
        }
      ]
      };
      rs.initiate(config);
      '

  loaddatamoviesintomongosingle:
    image: mongo:4.4.6
    # this container will exit after executing the command
    restart: "no"
    depends_on:
      - mongosingle
    volumes:
      - ./mongodb:/dataimport
    networks:
      - bigdata
    command: >
      mongoimport --uri 'mongodb://mongosingle:27017' --drop -d training -c movies --jsonArray /dataimport/movies.json 


  loaddatazipsintomongosingle:
    image: mongo:4.4.6
    # this container will exit after executing the command
    restart: "no"
    depends_on:
      - mongosingle
    volumes:
      - ./mongodb:/dataimport
    networks:
      - bigdata
    command: >
      mongoimport --db training --collection "zips" --drop --type json --host "mongosingle:27017"  --file "/dataimport/zips.json"

  loaddatacompaniesintomongosingle:
    image: mongo:4.4.6
    # this container will exit after executing the command
    restart: "no"
    depends_on:
      - mongosingle
    volumes:
      - ./mongodb:/dataimport
    networks:
      - bigdata
    command: >
      mongoimport --db training --collection "companies" --drop --type json --host "mongosingle:27017"  --file "/dataimport/companies.json"

  loaddataroutesintomongosingle:
    image: mongo:4.4.6
    # this container will exit after executing the command
    restart: "no"
    depends_on:
      - mongosingle
    volumes:
      - ./mongodb:/dataimport
    networks:
      - bigdata
    command: >
      mongoimport --db training --collection "routes" --drop --type json --host "mongosingle:27017"  --file "/dataimport/routes.json"

  loaddatarestaurantintomongosingle:
    image: mongo:4.4.6
    # this container will exit after executing the command
    restart: "no"
    depends_on:
      - mongosingle
    volumes:
      - ./mongodb:/dataimport
    networks:
      - bigdata
    command: >
      mongoimport --db training --collection "restaurant" --drop --type json --host "mongosingle:27017"  --file "/dataimport/restaurant.json"

  loaddatatripsintomongosingle:
    image: mongo:4.4.6
    # this container will exit after executing the command
    restart: "no"
    depends_on:
      - mongosingle
    volumes:
      - ./mongodb:/dataimport
    networks:
      - bigdata
    command: >
      mongoimport --db training --collection "trips" --drop --type json --host "mongosingle:27017"  --file "/dataimport/trips.json"

  loaddatagradesintomongosingle:
    image: mongo
    # this container will exit after executing the command
    restart: "no"
    depends_on:
      - mongosingle
    volumes:
      - ./mongodb:/dataimport
    networks:
      - bigdata
    command: >
      mongoimport --db training --collection "grades" --drop --type json --host "mongosingle:27017"  --file "/dataimport/grades.json"
 
  mongodataimport:
    image: mongo:4.4.6
    # this container will exit after executing the command
    restart: "no"
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    volumes:
      - ./mongodb:/dataimport
    networks:
      - bigdata
    command: >
      mongoimport --uri 'mongodb://mongo1:27017,mongo2:27017,mongo3:27017/?replicaSet=my-mongo-set' -d training -c movies --jsonArray /dataimport/movies.json
     # mongorestore --uri "mongodb://mongo1:27017,john.mongo2:27017,mongo3:27017/?replicaSet=my-mongo-set" -d training -c movies /dataimport

  mongo:
    image: mongo:4.4.6
    hostname: mongo
    container_name: 'mongo'
    volumes:
      - ./mongodb:/dataimport
    ports:
      - "27017:27017"
    networks:
      - bigdata

  mongosingle:
    image: mongo:4.4.6
    hostname: mongosingle
    container_name: mongosingle
    volumes:
      - ./mongodb:/dataimport
      - mongo-data:/data/db
    ports:
      - "27017:27017"
    networks:
      - bigdata


##########################################
# Configuration de l'instance Neo4J      #
##########################################

  neo4j:
    image: neo4j
    container_name: 'neo4j'
    volumes:
      - neo4j-data:/data
    ports:
      - "7687:7687"
      - "7474:7474"
    networks:
      - bigdata

####################################
# Déclaration du réseau bigdata    #
####################################
# L'ensemble des containers sera enregistré dans le réseau bigdata
# la résolution de nom sera utilisé pour les communications entre containers

networks:
  bigdata:

####################################
# Déclaration des volumes bigdata    #
####################################
# Pour rendre persistant les données celles-ci seront conservé dans des volumes


volumes:
  neo4j-data:
  mongo3-data:
  mongo2-data:
  mongo1-data:
  mongo-data:
  s3data:
